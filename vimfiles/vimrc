" misc
set nobackup       "no backup files, but allows swap files
set nocompatible
set hidden " closing a buffer keeps it in background
set history=500

" No annoying sound on errors
set noerrorbells
set visualbell
set t_vb=
set timeoutlen=500

" line numbers
set number
set relativenumber
set wrap

" indentation
set expandtab
set smarttab " some tab/backspace vs indent logic
set shiftwidth=2
set tabstop=2
set autoindent " when moving to next line, indent based on current line
set smartindent " auto inc/dec indent based on keywords

" whitespace
set list
set listchars=tab:▸\ ,eol:¬,trail:·,nbsp:·

" search
set ignorecase " ... when searching
set incsearch " highlight search as I type
set hlsearch
set smartcase " when searching, if uppercase then won't ignore case
set magic " reduces amount of regex quoting
set regexpengine=0 " auto-detect Regex engine

" ui
set wildmenu " builtin auto-complete menu
set wildignorecase
"set showmode
"set ruler " show row,col in status bar (affects ^G)
set scrolloff=7 " # lines to keep as vertical margin
set cmdheight=1
set showmatch " auto-highlight matching brackets
colorscheme torte

" status line
set laststatus=2 " always show a status line
set statusline=
"set statusline+=%#Icon#
"set statusline+=\:\)
set statusline+=\ %{HasPaste()}
set statusline+=%#Filename#%F
" modified flag
set statusline+=%m
" readonly flag
set statusline+=%#ReadOnly#\ %r
" help flag
set statusline+=%h
" preview flag
set statusline+=\ %w
set statusline+=\ \ CWD:\ %{getcwd()}
set statusline+=%=
set statusline+=%#Fileformat#\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\ [%{&fileformat}]
set statusline+=%#Position#\ \ \ Ln:%l\|%c

filetype plugin on
filetype indent on

let mapleader="\\"

:noremap Q !!$SHELL<CR>

vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

runtime macros/matchit.vim

" remember file last edit position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

au BufReadCmd *.rar,*.odt,*.ott,*.ods,*.ots,*.odp,*.otp,*.odg,*.otg call zip#Browse(expand("<amatch>"))

" Delete trailing white space on save
fun! CleanExtraSpaces()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  silent! %s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfun

if has("autocmd")
  autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee,*.hs,*.md,*.ts,*.java,*.jsp :call CleanExtraSpaces()
endif

function! HasPaste()
  if &paste
    return 'PASTE MODE  '
  endif
  return ''
endfunction

" Install vim-plug, then run :PlugInstall to install plugins.
" More information: https://github.com/junegunn/vim-plug
call plug#begin()

Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'dense-analysis/ale'

" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting
